syntax = "proto3";

package user;

// Definici√≥n del servicio
service UserService {
  rpc getAllUsers (Empty) returns (UserListResponse);
  rpc getUserByEmail (UserEmailRequest) returns (UserResponse);
  rpc getUserById (UserIdRequest) returns (UserResponse);
  rpc createUser (CreateUserRequest) returns (UserResponse);
  rpc updateUser (UpdateUserRequest) returns (UserResponse);
  rpc deleteUser (UserIdRequest) returns (UserResponse);
}

// Mensajes (DTOs) para las solicitudes y respuestas

message Empty {}

message UserEmailRequest {
  string email = 1;
}

message UserIdRequest {
  string id = 1;
}

message CreateUserRequest {
  string email = 1;
  string name = 2;
  string password = 3;
  repeated string role = 4; // En lugar de un solo rol, usamos un arreglo
  string bio = 5;
  string photo = 6;
  bool available = 7;
}

message UpdateUserRequest {
  string id = 1;
  string email = 2;
  string name = 3;
  repeated string role = 4; // En lugar de un solo rol, usamos un arreglo
  string bio = 5;
  string photo = 6;
  bool available = 7;
}

message UserResponse {
  string id = 1;
  string email = 2;
  string name = 3;
  repeated string role = 4;
  string bio = 5;
  string photo = 6;
  int32 point = 7;
  bool available = 8;
  string createdAt = 9;
  string updatedAt = 10;
}

message UserListResponse {
  repeated UserResponse users = 1;
}
